trigger:
  tags:
    include:
      - v*

pool:
  vmImage: 'Ubuntu 16.04'

variables:
  buildConfiguration: 'Release'

steps:
- task: GitVersion@5
  inputs:
    runtime: 'core'

- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: 'restore'
    projects: 'src/*.csproj'

- task: DotNetCoreCLI@2  
  inputs:
    command: 'build'
    projects: 'src/*.csproj'
    arguments: '--configuration $(buildConfiguration) /p:Version=$(GitVersion.SemVer) /p:InformationalVersion=$(GitVersion.FullSemVer)'
  displayName: 'dotnet build $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: 'test'
    projects: 'test/*.csproj'
    arguments: '--collect:"XPlat Code Coverage"'

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Agent.TempDirectory)/*/coverage.cobertura.xml'
    pathToSources: 'src/'
    reportDirectory: 'report/'

- script: dotnet publish src/*.csproj --configuration $(buildConfiguration) -o $(Build.BinariesDirectory) /p:Version=$(GitVersion.SemVer) /p:InformationalVersion=$(GitVersion.FullSemVer) -r win-x64
  displayName: Publish win-x64

- task: ArchiveFiles@2
  displayName: 'Archive $(Build.ArtifactStagingDirectory)'
  inputs:
    includeRootFolder: false
    archiveType: zip
    archiveFile: '$(Build.ArtifactStagingDirectory)/Eleia-$(GitVersion.SemVer)-win.zip'

- script: rm -rf $(Build.BinariesDirectory)/*
  displayName: Clean Binaries Directory

- script: dotnet publish src/*.csproj --configuration $(buildConfiguration) -o $(Build.BinariesDirectory) /p:Version=$(GitVersion.SemVer) /p:InformationalVersion=$(GitVersion.FullSemVer) -r linux-x64
  displayName: Publish linux-x64

- task: ArchiveFiles@2
  displayName: 'Archive $(Build.ArtifactStagingDirectory)'
  inputs:
    includeRootFolder: false
    archiveType: zip
    archiveFile: '$(Build.ArtifactStagingDirectory)/Eleia-$(GitVersion.SemVer)-linux.zip'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Eleia-$(GitVersion.SemVer)-win.zip'
    ArtifactName: 'drop'
    publishLocation: 'Container'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Eleia-$(GitVersion.SemVer)-linux.zip'
    ArtifactName: 'drop'
    publishLocation: 'Container'

- script: rm -rf $(Build.BinariesDirectory)/*
  displayName: Clean Binaries Directory

- task: Docker@2
  displayName: 'Build Docker Image'
  inputs:
    containerRegistry: 'dcr.ktos.dev Docker Registry'
    repository: eleia
    command: build
    Dockerfile: Dockerfile
    buildContext: $(Build.BinariesDirectory)
    tags: |
     $(GitVersion.SemVer)
     latest

- script: |
   docker save eleia:latest -o $(Build.ArtifactStagingDirectory)/eleia-docker-$(GitVersion.SemVer).tar
   gzip $(Build.ArtifactStagingDirectory)/eleia-docker-$(GitVersion.SemVer).tar   
  displayName: 'Saving Docker Image'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/eleia-docker-$(GitVersion.SemVer).tar.gz'
    ArtifactName: 'drop'
    publishLocation: 'Container'